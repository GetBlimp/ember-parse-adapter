{"name":"Ember Parse Adapter","tagline":"An Ember Data Adapter for Parse","body":"Ember Data Adapter for Parse\r\n===================\r\n\r\nAn [Ember Data Adapter](https://github.com/emberjs/data) built to use the [Parse REST API](https://parse.com/docs/rest). This is a full Ember implementation against the Parse REST API without the use of the Parse JavaScript SDK. It is implemented against [revision 11](https://github.com/emberjs/data/blob/master/BREAKING_CHANGES.md) of the Ember Data framework.\r\n\r\nFeatures\r\n--------\r\n\r\n##### ParseConnector: Ember Mixin\r\n  * Provides the AJAX connectivity to the Parse REST API.\r\n  * CORS implementation\r\n\r\n##### ParseJSONSerializer: Ember Data JSONSerializer\r\n  * Provides the translation of objectId to id for identity mapping.\r\n  * Provides encoding of hasMany associations to [Parse Pointer objects](https://parse.com/docs/rest#objects-types).\r\n  * Provides batch serialization according to [Parse batch operations](https://parse.com/docs/rest#objects-batch).\r\n  * Serializes Date types to the [ISO 8601 as used by Parse](https://parse.com/docs/rest#objects-types).\r\n\r\n##### ParseAdapter: Ember Data Adapter\r\n  * Implements the persistence layer to Parse.\r\n  * Provides either bulk/batch persistence or granular (bulkCommit by default).\r\n\r\n##### ParseMixin: Ember Mixin\r\n  * Provides created/updated date attributes.\r\n\r\n##### ParseModel: Ember Data Model\r\n  * Provides an easy way to setup a Parse object.\r\n  * Includes new StateManager that includes Parse specific states (Password Reset)\r\n\r\n##### ParseUser: Parse User implementation.\r\n  * Login\r\n  * Signup\r\n  * Request password reset\r\n\r\nGet Started\r\n-----------\r\nFirst take a look at the example.html file in the root of this project. It includes a very basic implementation of an application. Read the source to understand how the Ember Data Adapter for Parse is configured. You will want to include your Parse acct information from [Parse](https://parse.com) and then you can run that example.html file in a browser.\r\n\r\nOr if you prefer to jump right in, grab the latest version of ember-parse-adapter from the /dist directory in this project and include it in your HTML after the Ember dependencies.\r\n\r\n```html\r\n<!-- dependencies -->\r\n<script src=\"vendor/jquery.min.js\"></script>\r\n<script src=\"vendor/handlebars-1.0.0-rc.3.js\"></script>\r\n<script src=\"vendor/ember-1.0.0-rc.1.js\"></script>\r\n<script src=\"vendor/ember-data.js\"></script>\r\n\r\n<!-- Parse Data Adapter (latest build) -->\r\n<script src=\"dist/ember-parse-adapter-0.2.2.js\"></script>\r\n```\r\n\r\nNext you'll want to get an account at [Parse](https://parse.com). After this you will be provided with three keys:\r\n\r\n* Application ID\r\n* JavaScript Key\r\n* REST API Key\r\n\r\nYou will need each of these to configure the ParseAdapter.\r\n\r\n```javascript\r\n  var App = Ember.Application.create();\r\n\r\n  App.Store = DS.Store.extend({\r\n    revision: 11,\r\n    adapter: ParseAdapter.create({\r\n      applicationId: '<YOUR APP ID HERE>',\r\n      restApiId: '<YOUR REST API KEY HERE>',\r\n      javascriptId: '<YOUR JAVASCRIPT KEY HERE>'\r\n    })\r\n  });\r\n```\r\n\r\nOnce you have your adapter configured now you can create ParseModels just as you would create DS.Models.\r\n\r\n```javascript\r\n  App.Post = ParseModel.extend({\r\n    title: DS.attr('string'),\r\n    body: DS.attr('string')\r\n  });\r\n```\r\n\r\nIssues\r\n------\r\n\r\n* Demo is not out-of-the-box due to Parse acct dependency.\r\n* findQuery implementation is a bit weak/brittle. Needs full [Parse Query](https://parse.com/docs/rest#queries-constraints).\r\n* Error conditions are handled only by logging the error.\r\n\r\nRoadmap\r\n-------\r\n\r\n* Parse Roles implementation\r\n* Parse ACL implementation\r\n* Parse Relation for many-to-many associations.\r\n* Implement Store record error states.\r\n* Implement full type encodings in ParseSerializer supported by Parse (Bytes/Pointer/Relation).\r\n\r\nDev Notes\r\n---------\r\n* To get a build simply grunt. You'll find builds inside the /dist folder.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}